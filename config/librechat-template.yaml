# VoygentCE LibreChat Configuration
# This configuration integrates MCP servers for travel planning functionality

version: 1.2.0

cache: true

# Define available models 
endpoints:
  # Anthropic Claude
  anthropic:
    apiKey: "${ANTHROPIC_API_KEY}"
    baseURL: "https://api.anthropic.com/"
    models:
      default: ["claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022"]
      fetch: false
    titleConvo: true
    titleMethod: "completion"
    titleModel: "claude-3-5-haiku-20241022"

  # OpenAI GPT models  
  openAI:
    apiKey: "${OPENAI_API_KEY}"
    baseURL: "https://api.openai.com/v1"
    models:
      default: ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo"]
      fetch: false
    titleConvo: true
    titleMethod: "completion" 
    titleModel: "gpt-4o-mini"

# Model Context Protocol (MCP) Server Configuration
# This configuration is dynamically generated based on MCP_MODE environment variable

mcpServers:
  # Local browser automation for hotel data extraction (always enabled)
  chrome:
    command: "node"
    args: ["${MCP_CHROME_PATH}"]
    description: "Browser automation for hotel booking sites"
    instructions: |
      This MCP server provides browser automation capabilities for extracting hotel data from booking sites.
      Use the screenshot and web interaction tools to navigate sites and extract normalized hotel data.
      
      Primary functions:
      - screenshot: Capture current page state
      - click_element: Interact with page elements
      - type_text: Fill in forms
      - extract_hotels: Parse hotel search results into normalized format
      
      Always use screenshot before and after major actions to confirm success.
    tools:
      - screenshot
      - click_element  
      - type_text
      - extract_hotels
      - navigate_to_url

{{#if_database_local}}
  # Local Orchestrator API for trip and hotel data management
  orchestrator:
    command: "curl"
    args: ["-s", "-X", "POST"]
    baseUrl: "http://orchestrator:3000/api"
    description: "Trip planning and hotel data orchestration (Local Mode)"
    instructions: |
      This MCP server manages trip data, hotel caching, and proposal generation through REST API calls.
      Running in LOCAL MODE - all data stored locally in SQLite/PostgreSQL.
      
      Core endpoints:
      - /api/trips: Create and manage trips
      - /api/ingest/hotels: Store extracted hotel data
      - /api/ingest/rooms: Store room-level pricing
      - /api/facts/refresh/{tripId}: Update trip facts
      - /api/facts/query: Query trip facts
      - /api/plan/city: Get L/M/H recommendations
      - /api/proposal/render: Generate travel proposals
      
      Always refresh facts after ingesting new hotel data.
      Use city planning to get Low/Medium/High recommendations for clients.
    tools:
      - create_trip
      - ingest_hotels
      - ingest_rooms
      - refresh_facts
      - query_facts
      - plan_city
      - render_proposal
{{/if_database_local}}

{{#if_database_remote}}
  # Remote D1 Database MCP Server (Cloudflare Workers)
  d1_database:
    transport:
      type: "sse"
      url: "${MCP_D1_DATABASE_SSE_URL}"
    description: "Advanced trip and hotel data management (Remote Mode)"
    instructions: |
      This MCP server provides advanced trip planning capabilities via Cloudflare Workers.
      Running in REMOTE MODE - data stored in Cloudflare D1 with advanced features.
      
      Available tools include:
      - get_anything: Comprehensive search across all trip data
      - create_trip_with_client: Create trips with client assignment
      - ingest_hotels, ingest_rooms, query_hotels: Hotel data management
      - query_trip_facts, refresh_trip_facts: Fast fact processing
      - optimize_commission, calculate_trip_commission: Commission optimization
      - bulk_trip_operations: Multi-operation transactions
      
      Prefer get_anything for broad searches and specific tools for targeted operations.
      This server includes advanced features like commission optimization and fact materialization.
{{/if_database_remote}}

{{#if_instructions_remote}}
  # Remote Prompt Instructions MCP Server (Cloudflare Workers)  
  prompt_instructions:
    transport:
      type: "sse"
      url: "${MCP_PROMPT_INSTRUCTIONS_SSE_URL}"
    description: "Workflow and conversation management (Remote Mode)"
    instructions: |
      This MCP server manages travel agent workflows and conversation state.
      Running in REMOTE MODE - provides advanced workflow coordination.
      
      Key capabilities:
      - travel_agent_start: Initialize travel planning workflows
      - continue_trip: Resume work on existing trips with full context
      - get_instruction: Retrieve workflow-specific guidance
      - Dynamic workflow phase management
      
      Use continue_trip to resume previous conversations and maintain context.
      The server provides intelligent workflow guidance based on trip phase and status.
{{/if_instructions_remote}}

# Interface configuration
interface:
  privacyPolicy:
    externalUrl: "https://voygent.app/privacy"
  termsOfService:
    externalUrl: "https://voygent.app/terms"

# File handling
fileConfig:
  endpoints:
    anthropic:
      fileLimit: 20
      fileSizeLimit: 10  # MB
      totalSizeLimit: 50  # MB
      supportedMimeTypes:
        - "image/jpeg"
        - "image/jpg" 
        - "image/png"
        - "image/webp"
        - "image/gif"
        - "text/plain"
        - "application/pdf"
    openAI:
      fileLimit: 20
      fileSizeLimit: 10
      totalSizeLimit: 50
      supportedMimeTypes:
        - "image/jpeg"
        - "image/jpg"
        - "image/png" 
        - "image/webp"
        - "image/gif"
        - "text/plain"

# Registration and Login
registration:
  socialLogins: ["discord", "facebook", "github", "google", "openid"]
  
# Rate limiting  
rateLimits:
  conversationsImport:
    ipMax: 100
    ipWindowInMinutes: 60
    userMax: 50
    userWindowInMinutes: 60
  fileUploads:
    ipMax: 100
    ipWindowInMinutes: 60
    userMax: 50
    userWindowInMinutes: 60

# Security
securitySettings:
  checkBalance: false
  forcePrompt: false