# VoygentCE LibreChat Configuration
# This configuration integrates MCP servers for travel planning functionality

version: 1.1.0
cache: true

# REQUIRED: Global MCP server definitions for initialization
# These must be defined at the top level for MCPManager to initialize properly
mcpServers:

  d1_database:
    type: "streamable-http"
    url: "https://d1-database-improved.somotravel.workers.dev/sse"
    description: "Advanced trip and hotel data management (Remote Mode)"


  prompt_instructions:
    type: "streamable-http"
    url: "https://prompt-instructions-d1-mcp.somotravel.workers.dev/sse"
    description: "Workflow and conversation management (Remote Mode)"


endpoints:
  custom:
    - name: "Voygent Anthropic"
      apiKey: "${ANTHROPIC_API_KEY}"
      baseURL: "https://api.anthropic.com/v1"
      models:
        default: ["claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022"]
        fetch: false
      titleConvo: true
      titleMethod: "completion"
      titleModel: "claude-3-5-haiku-20241022"
      # MCP Servers integrated with this endpoint
      mcpServers:

        chrome:
          command: "node"
          args: ["/mcp-chrome/index.js"]
          description: "Browser automation for hotel booking sites"



        d1_database:
          transport:
            type: "sse"
            url: "https://d1-database-improved.somotravel.workers.dev/sse"
          description: "Advanced trip and hotel data management (Remote Mode)"
          serverInstructions: |
            This MCP server provides advanced trip planning capabilities via Cloudflare Workers.
            Running in REMOTE MODE - data stored in Cloudflare D1 with advanced features.
            
            Available tools include:
            - get_anything: Comprehensive search across all trip data
            - create_trip_with_client: Create trips with client assignment
            - bulk_trip_operations: Multi-operation transactions
            
            Prefer get_anything for broad searches and specific tools for targeted operations.


        prompt_instructions:
          transport:
            type: "sse"
            url: "https://prompt-instructions-d1-mcp.somotravel.workers.dev/sse"
          description: "Workflow and conversation management (Remote Mode)"
          serverInstructions: |
            This MCP server manages travel agent workflows and conversation state.
            Running in REMOTE MODE - provides advanced workflow coordination.
            
            Key capabilities:
            - travel_agent_start: Initialize travel planning workflows
            - continue_trip: Resume work on existing trips with full context
            - get_instruction: Retrieve workflow-specific guidance

    - name: "Voygent OpenAI"
      apiKey: "${OPENAI_API_KEY}"
      baseURL: "https://api.openai.com/v1"
      models:
        default: ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo"]
        fetch: false
      titleConvo: true
      titleMethod: "completion"
      titleModel: "gpt-4o-mini"
      # MCP Servers can also be added to OpenAI endpoint if needed
      mcpServers:

        chrome:
          command: "node"
          args: ["/mcp-chrome/index.js"]
          description: "Browser automation for hotel booking sites"


        d1_database:
          transport:
            type: "sse"
            url: "https://d1-database-improved.somotravel.workers.dev/sse"
          description: "Advanced trip and hotel data management"


        prompt_instructions:
          transport:
            type: "sse"
            url: "https://prompt-instructions-d1-mcp.somotravel.workers.dev/sse"
          description: "Workflow and conversation management"


# Interface configuration
interface:
  privacyPolicy:
    externalUrl: "https://voygent.app/privacy"
  termsOfService:
    externalUrl: "https://voygent.app/terms"

# File handling
fileConfig:
  endpoints:
    custom:
      fileLimit: 20
      fileSizeLimit: 10  # MB
      totalSizeLimit: 50  # MB
      supportedMimeTypes:
        - "image/jpeg"
        - "image/png"
        - "image/webp"
        - "image/gif"
        - "text/plain"
        - "application/pdf"

# Registration
registration:
  socialLogins: ["discord", "facebook", "github", "google", "openid"]
  
# Rate limiting  
rateLimits:
  fileUploads:
    ipMax: 100
    ipWindowInMinutes: 60
    userMax: 50
    userWindowInMinutes: 60
