#!/bin/bash
# VoygentCE Launcher Script
# Simple command to start, stop, and manage VoygentCE services

set -e

# Choose docker compose command
compose() {
    if docker compose version >/dev/null 2>&1; then
        docker compose "$@"
    else
        docker-compose "$@"
    fi
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Show usage
show_usage() {
    echo "VoygentCE - AI-powered travel planning assistant"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start          Start VoygentCE services (default)"
    echo "  stop           Stop all VoygentCE services"
    echo "  restart        Restart all services"
    echo "  status         Show service status"
    echo "  logs           Show service logs"
    echo "  setup          Run initial setup"
    echo "  update         Update services and rebuild"
    echo "  clean          Stop services and clean up volumes"
    echo "  health         Check service health"
    echo ""
    echo "Examples:"
    echo "  $0              # Start services"
    echo "  $0 start        # Start services"
    echo "  $0 logs         # Show logs"
    echo "  $0 stop         # Stop services"
    echo ""
}

# Check if Docker is running
check_docker() {
    if docker info >/dev/null 2>&1; then
        return 0
    fi

    print_warning "Docker is not running. Attempting to start it..."

    # Detect Desktop context hint
    DESKTOP_HINT=false
    if docker context show >/dev/null 2>&1; then
        if docker context show 2>/dev/null | grep -qi "desktop"; then
            DESKTOP_HINT=true
        fi
    fi
    if env | grep -q "DOCKER_HOST=.*desktop/docker.sock"; then
        DESKTOP_HINT=true
    fi

    # Try to start Docker Engine (system service)
    if command -v systemctl >/dev/null 2>&1; then
        if ! systemctl is-active --quiet docker 2>/dev/null; then
            if sudo -n true 2>/dev/null; then
                sudo systemctl start docker || true
            else
                systemctl start docker 2>/dev/null || sudo systemctl start docker || true
            fi
        fi
        # Try Docker Desktop user service if hinted
        if $DESKTOP_HINT; then
            systemctl --user start docker-desktop 2>/dev/null || true
        fi
    elif command -v service >/dev/null 2>&1; then
        service docker start 2>/dev/null || sudo service docker start 2>/dev/null || true
    fi

    # Wait up to 60s for Docker to become ready
    for i in $(seq 1 60); do
        if docker info >/dev/null 2>&1; then
            print_status "Docker is running."
            return 0
        fi
        sleep 1
    done

    # Fallback: switch to system engine context if Desktop is hung
    if $DESKTOP_HINT; then
        if docker context ls >/dev/null 2>&1 && docker context ls | grep -q " default "; then
            print_warning "Docker Desktop seems stuck; trying system engine context..."
            docker context use default >/dev/null 2>&1 || true
            if docker info >/dev/null 2>&1; then
                print_status "Switched to system Docker engine."
                return 0
            fi
        fi
    fi

    if $DESKTOP_HINT; then
        print_error "Docker Desktop appears to be the active context but is not running. Please launch Docker Desktop and retry."
    else
        print_error "Could not start Docker automatically. Start it manually (e.g., 'sudo systemctl start docker') and rerun."
    fi
    exit 1
}

# Check service health
check_health() {
    print_info "Checking VoygentCE service health..."
    
    # Check if containers are running
    if ! compose ps | grep -q "Up"; then
        print_warning "Services are not running. Use '$0 start' to start them."
        return 1
    fi
    
    # Check LibreChat health
    if curl -sf http://localhost:3080 >/dev/null 2>&1; then
        print_status "LibreChat is healthy (http://localhost:3080)"
    else
        print_warning "LibreChat may not be fully started yet"
    fi
    
    # Check MongoDB
    if compose exec -T mongodb mongosh --eval "db.runCommand('ping')" >/dev/null 2>&1; then
        print_status "MongoDB is healthy"
    else
        print_warning "MongoDB may not be ready"
    fi
    
    # Check MeiliSearch
    if curl -sf http://localhost:7700/health >/dev/null 2>&1; then
        print_status "MeiliSearch is healthy (http://localhost:7700)"
    else
        print_warning "MeiliSearch may not be ready"
    fi
    
    return 0
}

# Start services
start_services() {
    print_info "Starting VoygentCE services..."
    check_docker
    
    # Check if .env file exists
    if [ ! -f .env ]; then
        print_error ".env file not found. Running setup first..."
        ./scripts/setup.sh
    fi
    
    # Start services
    if [ -f scripts/start-services.sh ]; then
        ./scripts/start-services.sh
    else
        compose up -d
        print_info "Waiting for services to start..."
        sleep 10
    fi
    
    # Check health
    if check_health; then
        print_status "VoygentCE is ready!"
        echo ""
        echo "üåê Access your services:"
        echo "   ‚Ä¢ LibreChat UI:    http://localhost:3080"
        echo "   ‚Ä¢ MeiliSearch:     http://localhost:7700"
        echo ""
        print_info "Create an account in LibreChat and start planning trips!"
    else
        print_warning "Services started but may still be initializing..."
        print_info "Check status with: $0 health"
    fi
}

# Stop services
stop_services() {
    print_info "Stopping VoygentCE services..."
    compose down
    print_status "VoygentCE services stopped"
}

# Restart services
restart_services() {
    print_info "Restarting VoygentCE services..."
    compose restart
    print_status "VoygentCE services restarted"
    
    print_info "Waiting for services to be ready..."
    sleep 10
    check_health
}

# Show service status
show_status() {
    print_info "VoygentCE service status:"
    echo ""
    compose ps
    echo ""
    
    # Show network info
    print_info "Service endpoints:"
    echo "   ‚Ä¢ LibreChat UI:    http://localhost:3080"
    echo "   ‚Ä¢ MeiliSearch:     http://localhost:7700"
    if docker-compose ps | grep -q orchestrator; then
        echo "   ‚Ä¢ Orchestrator API: http://localhost:3000"
    fi
    echo ""
}

# Show logs
show_logs() {
    local service="$1"
    if [ -n "$service" ]; then
        print_info "Showing logs for $service..."
        compose logs -f "$service"
    else
        print_info "Showing logs for all services (Ctrl+C to exit)..."
        compose logs -f
    fi
}

# Run setup
run_setup() {
    print_info "Running VoygentCE setup..."
    ./scripts/setup.sh
}

# Update services
update_services() {
    print_info "Updating VoygentCE services..."
    
    # Pull latest images
    compose pull
    
    # Rebuild if needed
    compose build
    
    # Restart services
    restart_services
    
    print_status "VoygentCE services updated"
}

# Clean up
clean_services() {
    print_warning "This will stop services and remove volumes (data will be lost!)"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Cleaning up VoygentCE..."
        docker-compose down -v
        docker system prune -f
        print_status "VoygentCE cleaned up"
    else
        print_info "Clean up cancelled"
    fi
}

# Main command handling
case "${1:-start}" in
    start)
        start_services
        ;;
    stop)
        stop_services
        ;;
    restart)
        restart_services
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$2"
        ;;
    setup)
        run_setup
        ;;
    update)
        update_services
        ;;
    clean)
        clean_services
        ;;
    health)
        check_health
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac
